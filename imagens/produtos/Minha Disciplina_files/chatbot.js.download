//region Variáveis
//TEXTOS
var textBoasVindas = "Olá, como posso ajudá-lo?",
    textCampoVazio = "Para te ajudar preciso que você escreva sua dúvida no campo abaixo",
    textNaoEntendeu = "Desculpe, não entendi o que você quis dizer, favor repetir a pergunta!",
    textFaleConosco = "Fale conosco",
    textMostraTags = "Desculpe, não entendi o que você quis dizer, mas veja se as seguintes tags tem a ver com a sua dúvida:",
    textMostraQuestoes = "Agora veja se alguma questão a seguir te ajuda:",
    textConfirmaDuvida = "Você se refere a uma destas opções? ",
    textSemMaisQuestoes = "Desculpe, não encontrei mais perguntas relacionadas",
    textAlgoMais = "Posso ajudá-lo em algo mais?",
    textEscolhaOpcao = "Desculpe não entendi, favor escolha uma das opções:";
// CONTADORES
var naoEntendeu = 0,
    naoConfirmou = 0,
    botBoxCount = 4;
// ESTADOS
var confirmandoDuvida = false,
    selecionandoTag = false,
    selecionandoQuestao = false,
    selecionandoContato = false,
    optClick = false;
// OUTROS
var ultimaBusca,
    questionIndex = 0,
    lastTag,
    lastQuestionList = [],
    delayTime = 0;
// STORE VARIABLES
var selections = "",
    allChat = "",
    stage = "",
    lastUserInput = "",
    stageNextQuestion = "",
    lastQuestionId,
    selectionTag = "",
    courseType = "",
    selectedCourse = null,
    selectedGrade = null,
    utilModel = [],
    interactionCount = 0,
    lastBodyText = "";
//endregion

// MÉTODO PRINCIPAL DO CHAT BOT
function buscaChat() {
    var i = 0,
        busca, //filtro usado nas buscas do elastic
        list = [], //lista auxiliar usada para imprimir botões na tela com títulos de perguntas
        userInput,
        tempUserInput,
        transform, //lista com o userInput dividido
        getter, //retorno da pesquisa no fuzzyset
        tempText, //junta textos para exibição
        questionSubmit = true, //false se o usuario submeteu uma opção inválida na escolha da questão
        initDoc,
        qId = "";
    userInput = document.getElementById("userInput").value;
    tempUserInput = userInput;
    document.getElementById("userInput").value = "";
    //console.log(userInput);
    document.getElementById("userSubmit").disabled = false;

    //console.log(fuzzy);
    //console.log("userinput: " + userInput);

    //region fuzzyset confirmation
    transform = tempUserInput.split(' ' || ',' || ';' || '?' || '!');
    //console.log(transform);
    if (transform != null) {
        for (i = 0; i < transform.length; i++) {
            getter = fuzzy.get(transform[i]);
            if (getter != null && getter.length > 0 && getter[0][0] > 0.6) {
                tempUserInput = tempUserInput.replace(transform[i], getter[0][1]);
            } else if (getter != null && getter.length > 0) {
                //console.log(getter[0]);
            }
        }
    }
    //endregion
    //console.log("tempuser: " + tempUserInput);
    lastUserInput = userInput;
    if (tempUserInput == null || tempUserInput === "" || tempUserInput === undefined) {
        //botAnswer(textCampoVazio, 1000);
    } else {
        interactionCount++;
        userChatText(userInput);
        if (optClick) {
            optClick = false;
            allChat += "_USER-CLICK_" + userInput;
            switch (stage) {
                case "":
                    disableBotButton(userInput);
                    //console.log("CASE VAZIO");
                    var selectedBtnList = document.getElementsByClassName("enabledBtn");
                    if (selectedBtnList[selectedBtnList.length - 1].name !== "") {
                        qId = selectedBtnList[selectedBtnList.length - 1].name.replace("QID:", "");
                    }
                    searchOptByClick(userInput, qId);
                    break;

                case "select_course":
                    stage = "";
                    if (qId !== "") {
                        var selectionQid = getDocById(qId);
                        selections += "<br>" + selectionQid.doc.title;
                    } else {
                        selections += "<br>" + userInput;
                    }
                    //console.log(selections);
                    var uniList = [15, 18, 19, 20],
                        optList = [];
                    for (i = 0; i < uniList.length; i++) {
                        var tempdoc = getDocById(uniList[i]);
                        optList.push(tempdoc.doc.title + "QID:" + tempdoc.ref);
                    }
                    botAnswer("Selecione uma das unidades:", 2000, optList);
                    break;

                case "next_question":
                    disableBotButton(userInput);
                    stage = "";
                    if (userInput !== "Serviço Unidades") {
                        if (qId !== "") {
                            var selectionQid = getDocById(qId);
                            selections += "<br>" + selectionQid.doc.title;
                        } else {
                            selections += "<br>" + userInput;
                        }
                    }
                    if (lastQuestionId === "14") {
                        lastQuestionId = "";
                        var x;
                        for (x = 0; x < utilModel.length; x++) {
                            var tempCourse = utilModel[x].course;
                            if (tempCourse === userInput && utilModel[x].is_active === "true")
                                selectedCourse = utilModel[x];
                        }
                    }
                    //console.log("stageNextQuestion:");
                    //console.log(stageNextQuestion);
                    if (stageNextQuestion.ref !== "25") {
                        searchOptByClick(stageNextQuestion.doc.title, stageNextQuestion.ref);
                    } else {
                        getuserEmail(stageNextQuestion.doc);
                    }
                    break;

                case "select_course_end":
                    stage = "";
                    selections = "";
                    getCourseActivityEndDate(userInput);
                    //console.log(selections);
                    break;

                case "select_email":
                    if (userInput === "confirmar") {
                        sendEmailService();
                        selections = "";
                        stage = "";
                    }
                    if (userInput === "cancelar") {
                        initDoc = getDocById(37);
                        botAnswer(initDoc.doc.body, 3000, getQuestionOptions(initDoc));
                        selections = "";
                        stage = "";
                    }
                    break;
            }
        } else {
            allChat += "_USER-INPUT_" + userInput;
            var haveService = false;
            switch (stage) {
                case "select_email":
                    var doc = getDocById(25);
                    if (userInput.match(/.+@+.+[.]+.+/gi) !== null) {
                        doc.body = "Confirme seu email ou digite outro no campo de texto: " + userInput;
                        document.getElementsByName("USER_EMAIL")[0].value = userInput;
                        botAnswer(doc.body, 1000, ['confirmar', 'cancelar']);
                    } else {
                        if (document.getElementsByName("USER_EMAIL")[0].value === "") {
                            doc.body = "Por favor, insira um endereço de email válido: " + document.getElementsByName("USER_EMAIL")[0].value;
                            botAnswer(doc.body, 1000, ['cancelar']);
                        } else {
                            doc.body = "Por favor, insira um endereço de email válido ou confirme para usar o email a seguir: " + document.getElementsByName("USER_EMAIL")[0].value;
                            botAnswer(doc.body, 1000, ['confirmar', 'cancelar']);
                        }
                    }
                    haveService = true;
                    break;
            }
            if (!haveService) {
                stage = "";
                searchOptByUserInput(tempUserInput);
            }
        }
        disableBotButton(userInput);
    }
    //console.log("COUNT::: " + interactionCount);
}

function botAnswer(text, waitTime, buttonList) {
    callTyping();
    if (index.documentStore.length < 1) {
        loadQuestions(text, waitTime, buttonList);
    } else {
        if (selectedCourse !== null) {
            if (text.indexOf("_LOADCOURSE_") !== -1) {
                text = text.replace(/_LOADCOURSE_/g, selectedCourse.course);
            }
        }
        if (selectedGrade !== null) {
            if (text.indexOf("_LOADGRNAME_") !== -1) {
                text = text.replace(/_LOADGRNAME_/g, selectedGrade.gradeName);
            }
            if (text.indexOf("_LOADSTRDATE_") && selectedGrade.str_date !== null) {
                text = text.replace(/_LOADSTRDATE_/g, selectedGrade.str_date);
            }
            if (text.indexOf("_LOADSTRTIME_") && selectedGrade.str_hour !== null) {
                text = text.replace(/_LOADSTRTIME_/g, selectedGrade.str_hour);
            }
            if (text.indexOf("_LOADENDDATE_") && selectedGrade.end_date !== null) {
                text = text.replace(/_LOADENDDATE_/g, selectedGrade.end_date);
            }
            if (text.indexOf("_LOADENDTIME_") && selectedGrade.end_hour !== null) {
                text = text.replace(/_LOADENDTIME_/g, selectedGrade.end_hour);
            }
        }
        if (text.indexOf("_ALLCOURSES_") !== -1 || text.indexOf("_ALLORGS_") !== -1) {
            if (utilModel.length < 1) {
                getServiceFromServer("LOAD_COURSES", text, waitTime, buttonList);
            } else {
                var newBody = "",
                    x;
                if (text.indexOf("_ALLCOURSES_") !== -1) {
                    for (x = 0; x < utilModel.length; x++) {
                        if (utilModel[x].is_org === "false" && utilModel[x].is_active === "true") {
                            newBody += '<form target="_blank" method="POST" action="/webapps/late-Course_Landing_Page_Course_100-BBLEARN/Controller">' +
                                '<input type="hidden" name="action" value="Blackboard-Landing-Page"/>' +
                                '<input type="hidden" name="course" value="' + utilModel[x].course_id + '"/>' +
                                '<input type="submit" class="optChatFull" value="' + utilModel[x].course + '"></form>'
                        }
                    }
                    if (newBody === "") {
                        newBody = "Ops, parece que você não está matriculado em nenhuma disciplina."
                    }
                    text = text.replace(/_ALLCOURSES_/g, newBody);
                } else {
                    for (x = 0; x < utilModel.length; x++) {
                        if (utilModel[x].is_org === "true" && utilModel[x].is_active === "true") {
                            newBody += '<form target="_blank" method="POST" action="/webapps/late-Course_Landing_Page_Course_100-BBLEARN/Controller">' +
                                '<input type="hidden" name="action" value="Blackboard-Landing-Page"/>' +
                                '<input type="hidden" name="course" value="' + utilModel[x].course_id + '"/>' +
                                '<input type="submit" class="optChatFull" value="' + utilModel[x].course + '"></form>'
                        }
                    }
                    if (newBody === "") {
                        newBody = "Ops, parece que você não está matriculado em nenhuma comunidade."
                    }
                    text = text.replace(/_ALLORGS_/g, newBody);
                }

                setAnswer(text, waitTime, buttonList);
            }
        } else {
            setAnswer(text, waitTime, buttonList);
        }
    }
}

function setAnswer(text, waitTime, buttonList) {
    allChat += "_BOT-OUTPUT_" + text;
    var textDivision = text.split("_NEWP_"),
        x = 0,
        timeMultiplier = 50;
    if (textDivision.length > 1) {
        var lastTimer = 0;
        for (x = 0; x < textDivision.length; x++) {
            if (x === textDivision.length - 1) {
                console.log("LAST QUESTION BODY: " + lastBodyText);
                if (lastBodyText !== "") {
                    console.log("LAST QUESTION LENGTH: " + lastBodyText.length);
                    waitTime = lastBodyText.length * timeMultiplier;
                    console.log("LAST QUESTION WAIT TIME: " + waitTime);
                }
                setTimeout(answerP, waitTime + lastTimer, textDivision[x], buttonList);
                lastBodyText = textDivision[x].replace(/<.+?>/gi, "");
            } else {
                console.log("LAST QUESTION BODY: " + lastBodyText);
                if (lastBodyText !== "") {
                    console.log("LAST QUESTION LENGTH: " + lastBodyText.length);
                    waitTime = lastBodyText.length * timeMultiplier;
                    console.log("LAST QUESTION WAIT TIME: " + waitTime);
                }
                setTimeout(answerP, waitTime + lastTimer, textDivision[x]);
                lastBodyText = textDivision[x].replace(/<.+?>/gi, "");
            }
            if (x !== textDivision.length - 1) {
                setTimeout(callTyping, waitTime + lastTimer);
            }
            lastTimer += waitTime;
        }
    } else {
        console.log("ELSE");
        console.log("LAST QUESTION BODY: " + lastBodyText);
        if (lastBodyText !== "") {
            console.log("LAST QUESTION LENGTH: " + lastBodyText.length);
            waitTime = lastBodyText.length * timeMultiplier;
            console.log("LAST QUESTION WAIT TIME: " + waitTime);
        }
        setTimeout(answerP, waitTime, text, buttonList);
        if (text.indexOf("Eu sou a Laura, tudo bem?") === -1) {
            lastBodyText = text.replace(/<.+?>/gi, "");
        }
    }
}

function answerP(text, buttonList) {
    var chatArea,
        tempButtonValue,
        buttonArea,
        i = 0;
    this.botBoxCount++;
    chatArea = document.getElementById("chatMessages");
    chatArea.innerHTML += '<div class="chatMsg"><span class="botImg"></span><div class="bot" tabindex=" ' + this.botBoxCount + '"><span>' + text + '</span>';
    buttonArea = document.getElementsByClassName("bot")[document.getElementsByClassName("bot").length - 1];
    var waves = document.getElementsByClassName("wave");
    if (waves[0] !== undefined) {
        waves[waves.length - 1].parentElement.parentElement.removeChild(waves[waves.length - 1].parentElement);
    }
    if (buttonList !== undefined) {
        for (i = 0; i < buttonList.length; i++) {
            var qId = "";
            if (buttonList[i].indexOf("QID:")) {
                qId = buttonList[i].split("QID:")[1];
                buttonList[i] = buttonList[i].split("QID:")[0];
            }
            if (buttonList[i].indexOf("_TYPE:") !== -1) {
                tempButtonValue = buttonList[i].split("_TYPE:")[1];
                buttonArea.innerHTML += '<input type="button" class="optChat" name="QID:' + qId
                    + '" value="'
                    + buttonList[i].split("_TYPE:")[0]
                    + '" onclick="changeCourseSavedType(\'' + tempButtonValue + '\'); changeChatValue(\''
                    + buttonList[i].split("_TYPE:")[0] + '\')" />';
            } else {
                buttonArea.innerHTML += '<input type="button" class="optChat" name="QID:' + qId
                    + '" value="'
                    + buttonList[i]
                    + '" onclick="changeChatValue(\''
                    + buttonList[i] + '\')" />';
            }
        }
    }
    scrollToBotton();
}

function callTyping() {
    if (document.getElementsByClassName("wave")[0] === undefined) {
        var chatArea = document.getElementById("chatMessages");
        chatArea.innerHTML += '<div class="chatMsg"><span class="botImg"></span>' +
            '<div class="wave">\n' +
            '<span class="dot"></span>\n' +
            '<span class="dot"></span>\n' +
            '<span class="dot"></span>\n' +
            '</div>' +
            '</div>';
        scrollToBotton();
    }
}

function changeCourseSavedType(sType) {
    courseType = sType;
    //console.log("COURSE TYPE HERE::::");
    //console.log(courseType);
}

/*function tagSelection(tempUserInput) {
    var busca = index.search(tempUserInput, {
        fields: {
            tags: {boost: 2}
        },
        bool: "OR",
        expand: true
    });
    var list = [],
        i = 0;
    if (busca.length < 1) {
        selecionandoTag = true;
        botAnswer(this.textEscolhaOpcao, 1000);
        botAnswer(this.textMostraTags, 2000, tagList);
        botAnswer(this.textFaleConosco, 4000,
            ['email', 'cancelar']);
        selecionandoContato = true;
    } else {
        if (busca.length >= 5) {
            for (i = 0; i < 5; i++) {
                list.push(busca[i].doc.title);
            }
        } else {
            for (i = 0; i < busca.length; i++) {
                list.push(busca[i].doc.title);
            }
        }
        selecionandoQuestao = true;
        document.getElementById("userSubmit").disabled = true;
        selecionandoTag = false;
        lastQuestionList = list;
        botAnswer(textMostraQuestoes, 2000, list);
    }
}*/

function userChatText(text) {
    var chatArea = document.getElementById("chatMessages");
    chatArea.innerHTML += '<p class="user">' + text + '</p>';
    scrollToBotton();
}

function changeChatValue(value) {
    document.getElementById("userInput").value = value;
    optClick = true;
    buscaChat();
}

function naoEntender() {
    if (this.naoEntendeu <= 1) {
        this.naoEntendeu++;
        botAnswer(this.textNaoEntendeu, 1000);
    } else {
        selecionandoTag = true;
        botAnswer(this.textMostraTags, 1000, tagList);
        botAnswer(this.textFaleConosco, 3000, ['email', 'cancelar']);
        selecionandoContato = true;
    }
}

function resetState() {
    naoConfirmou = 0;
    naoEntendeu = 0;
    questionIndex = 0;
    confirmandoDuvida = false;
    selecionandoTag = false;
    selecionandoQuestao = false;
    selecionandoContato = false;
    optClick = false;
    stage = "";
    selections = "";
}

function disableBotButton(input) {
    var buttonL = document.getElementsByClassName("optChat");
    for (var i = 0; i < buttonL.length; i++) {
        if (buttonL[i].value === input && !buttonL[i].disabled) {
            buttonL[i].classList.add("enabledBtn");
        }
        buttonL[i].disabled = true;
        if (!buttonL[i].classList.contains("enabledBtn")) {
            buttonL[i].classList.add("disabledBtn");
        }
    }
    for (i = 0; i < buttonL.length; i++) {
        buttonL[i].classList.remove("optChat");
    }
}

function scrollToBotton() {
    var element = document.getElementById("chatMessagesContainer");
    element.scrollTop = element.scrollHeight - element.clientHeight;
}

// When the user clicks on <span> (x), close the modal
function closeButtonClick() {
    if (interactionCount > 0) {
        saveConversation(allChat);
    } else {
        document.getElementById("starScore").value = "";
        document.getElementById("fullConversation").value = "";
        allChat = "";
        interactionCount = 0;
    }
    chatArea.classList.add('closeChat');
    chatButton.style.display = "block";
    setTimeout(function () {
        chatButton.classList.remove('openChat');
    }, 100);
    resetState();
    setTimeout(function () {
        chatArea.classList.remove('openChat');
        var chatframe = window.parent.document.getElementById("chatBotFrame");
        if (chatframe.classList.contains("openChatFrame")) {
            chatframe.classList.remove("openChatFrame");
        }
        chatframe.classList.add("closeChatFrame");
    }, 650);
}

function closeEndConversation() {
    var finishDoc = getDocById(135);
    botAnswer(finishDoc.doc.body, 2000);
    setTimeout(closeButtonClick, 7000);
}

function searchOptByClick(input, id) {
    var search = index.search(input, {
            fields: {
                body: {boost: 0},
                title: {boost: 2}
            },
            bool: "OR",
            expand: true
        }),
        questionDoc;
    //console.log("BEFORE ID CHECK");
    if (id !== null && id !== undefined) {
        //console.log("ID CHECK = " + id);
        questionDoc = getDocById(id);
    } else {
        //console.log("NO ID");
    }
    //console.log("SEARCH FULL:");
    //console.log(search);
    if (questionDoc !== undefined && questionDoc !== null) {
        if (questionDoc === undefined || questionDoc === null) {
            botAnswer(textNaoEntendeu, 1000);
            return false;
        }
        if (getQuestionOptions(questionDoc) !== false) {
            botAnswer(questionDoc.doc.body, 2000, getQuestionOptions(questionDoc));
            //console.log(getQuestionOptions(questionDoc));
        }
        if (input !== "Serviço Unidades" && questionDoc.doc.type !== "2") {
            selections += "<br>" + questionDoc.doc.title;
        }
        if (questionDoc.ref === "16" || questionDoc.ref === "17" || questionDoc.ref === "38") {
            selections = "";
        }
        if (questionDoc.doc.tags !== "null" && questionDoc.doc.tags !== "") {
            document.getElementsByName("QUESTION_TAG")[0].value = questionDoc.doc.tags;
        }
        //console.log(selections);
    } else {
        //console.log("NÃO ENCONTROU NADA searchOptByClick()");
        botAnswer(textNaoEntendeu, 1000);
    }
}

function searchOptByUserInput(input) {
    var search = index.search(input, {
        fields: {
            body: {boost: 0},
            title: {boost: 1},
            keyword: {boost: 2}
        },
        bool: "OR",
        expand: true
    });
    //console.log("BUSCA:");
    //console.log(search);
    if (search.length > 0) {
        var list = [],
            i,
            title,
            parent,
            parentDoc;
        if (search.length >= 5) {
            for (i = 0; i < 5; i++) {
                if (search[i].doc.type !== "3" && search[i].doc.type !== "2") {
                    parent = search[i].doc.relation.split("-")[0];
                    if (parent !== null && parent !== "0") {
                        parentDoc = getDocById(parent);
                        if (parentDoc !== null) {
                            title = parentDoc.doc.title;
                            if (list.indexOf(title) === -1) {
                                list.push(search[i].doc.title + " (" + title + ")" + "QID:" + search[i].ref);
                            }
                        }
                    } else if (parent !== null && search[i].ref !== "16" && search[i].ref !== "17") { //16 e 17 são introduções do chatbot
                        title = search[i].doc.title;
                        if (list.indexOf(title) === -1) {
                            list.push(title + "QID:" + search[i].ref);
                        }
                    }
                }
            }
            botAnswer(textConfirmaDuvida, 2000, list);
        } else {
            for (i = 0; i < search.length; i++) {
                if (search[i].doc.type !== "3" && search[i].doc.type !== "2") {
                    parent = search[i].doc.relation.split("-")[0];
                    if (parent !== null && parent !== "0") {
                        parentDoc = getDocById(parent);
                        if (parentDoc !== null) {
                            title = parentDoc.doc.title;
                            if (list.indexOf(title) === -1) {
                                list.push(search[i].doc.title + " (" + title + ")" + "QID:" + search[i].ref);
                            }
                        }
                    } else if (parent !== null && search[i].ref !== "16" && search[i].ref !== "17") { //16 e 17 são introduções do chatbot
                        title = search[i].doc.title;
                        if (list.indexOf(title) === -1) {
                            list.push(title + "QID:" + search[i].ref);
                        }
                    }
                }
            }
            if (list.length > 0) {
                botAnswer(textConfirmaDuvida, 2000, list);
            } else {
                botAnswer(textNaoEntendeu, 1000);
            }
        }
    } else {
        botAnswer(textNaoEntendeu, 1000);
        var initDoc = getDocById(37);
        setTimeout(callTyping, 1100);
        botAnswer(initDoc.doc.body, 3000, getQuestionOptions(initDoc));
    }
    selections = "";
}

function getQuestionOptions(question) {
    var questionParent = question.doc.relation.split("-"),
        questionIds,
        i,
        options = [];
    if (questionParent[1] !== undefined) {
        questionIds = questionParent[1].split(",");
    } else {
        questionIds = question.doc.relation.split(",");
    }
    //console.log("QUESTION IDS:");
    //console.log(questionIds);
    for (i = 0; i < questionIds.length; i++) {
        var opt = getDocById(questionIds[i]);
        //console.log("OPT " + questionIds[i] + ":");
        //console.log(opt);
        if (opt !== null) {
            if (opt.doc.type !== "3") {
                options.push(opt.doc.title + "QID:" + opt.ref);
            } else {
                selectServiceFunction(question, opt);
                return false;
            }
        } else if (question.doc.type === "3") {
            selectServiceFunction(question, opt);
            return false;
        }
    }
    return options;
}

function selectServiceFunction(doc, opt) {
    var list = [],
        haveCase = false,
        questionIds = doc.doc.relation.split(",");
    //console.log("init function selectServiceFunction()");
    //console.log(doc);
    //console.log(opt);
    if (opt !== null) {
        switch (opt.ref) {
            case "14":
                if (opt.doc.body === "Serviço disciplinas" && utilModel.length < 1) {
                    getServiceFromServer("LOAD_COURSES", undefined, undefined, undefined, doc, opt);
                } else {
                    if (opt.doc.body === "Serviço disciplinas") {
                        opt.doc.body = getCoursesNTypes();
                        list = opt.doc.body.split("|");
                        botAnswer(doc.doc.body, 2000, list);
                    } else {
                        list = opt.doc.body.split("|");
                        botAnswer(doc.doc.body, 2000, list);
                    }
                }
                if (questionIds.length > 1 && questionIds[questionIds.length - 1] !== "14") {
                    stage = "next_question";
                    stageNextQuestion = getDocById(questionIds[questionIds.length - 1]);
                    lastQuestionId = "14";
                }
                haveCase = true;
                break;
            case "285":
                if (opt.doc.body === "\n" + "Serviço comunidades" && utilModel.length < 1) {
                    getServiceFromServer("LOAD_COURSES", undefined, undefined, undefined, doc, opt);
                } else {
                    if (opt.doc.body === "\n" + "Serviço comunidades") {
                        opt.doc.body = getOrgsNTypes();
                        list = opt.doc.body.split("|");
                        botAnswer(doc.doc.body, 2000, list);
                    } else {
                        list = opt.doc.body.split("|");
                        botAnswer(doc.doc.body, 2000, list);
                    }
                }
                if (questionIds.length > 1 && questionIds[questionIds.length - 1] !== "285") {
                    stage = "next_question";
                    stageNextQuestion = getDocById(questionIds[questionIds.length - 1]);
                    lastQuestionId = "14";
                }
                haveCase = true;
                break;
            case "17":
                var initDoc = getDocById(17);
                botAnswer(doc.doc.body, 2000);
                botAnswer(initDoc.doc.body, 3000, getQuestionOptions(initDoc));
                haveCase = true;
                break;
            case "37":
                var endDoc = getDocById(37);
                selections = "";
                botAnswer(endDoc.doc.body, 3000, getQuestionOptions(endDoc));
                haveCase = true;
                break;
            case "40":
                botAnswer(doc.doc.body, 2000);
                setTimeout(closeButtonClick, 7000);
                haveCase = true;
                break;
            case "132":
                if (opt.doc.body === "\n" + "Serviço notas" && utilModel.length < 1) {
                    getServiceFromServer("LOAD_COURSES", undefined, undefined, undefined, doc, opt);
                } else {
                    if (opt.doc.body === "\n" + "Serviço notas") {
                        opt.doc.body = getCoursesNTypes();
                        list = opt.doc.body.split("|");
                        botAnswer(doc.doc.body, 2000, list);
                    } else {
                        list = opt.doc.body.split("|");
                        botAnswer(doc.doc.body, 2000, list);
                    }
                }
                if (questionIds.length > 1 && questionIds[questionIds.length - 1] !== "14") {
                    stage = "next_question";
                    stageNextQuestion = getDocById(questionIds[questionIds.length - 1]);
                }
                haveCase = true;
                break;
        }
    }
    switch (doc.ref) {
        case "15":
            var tempdoc;
            switch (courseType) {
                case "04 - GRAD NICHO":
                case "03 - GRAD NACIONAL":
                case "01 - F2F":
                    list = [];
                    list.push(getDocById("24").doc.title + "QID:24");
                    list.push(getDocById("18").doc.title + "QID:18");
                    list.push(getDocById("19").doc.title + "QID:19");
                    list.push(getDocById("20").doc.title + "QID:20");
                    botAnswer(doc.doc.body, 2000, list);
                    break;
                case "05 - PÓS NACIONAL":
                    list = [];
                    list.push(getDocById("24").doc.title + "QID:24");
                    list.push(getDocById("18").doc.title + "QID:18");
                    list.push(getDocById("19").doc.title + "QID:19");
                    botAnswer(doc.doc.body, 2000, list);
                    break;
                case "06 - PÓS MENSAL":
                    tempdoc = getDocById(25);
                    getuserEmail(tempdoc.doc);
                    haveCase = true;
                    break;
                default:
                    tempdoc = getDocById(25);
                    getuserEmail(tempdoc.doc);
                    haveCase = true;
                    break;
            }
            haveCase = true;
            break;
        case "18":
        case "19":
        case "20":
        case "24":
            tempdoc = getDocById(25);
            getuserEmail(tempdoc.doc);
            haveCase = true;
            break;
        case "22":
            var i,
                x,
                gradeList = [];
            //console.log("CASE 22");
            for (i = 0; i < utilModel.length; i++) {
                var course = utilModel[i].course;
                if (course === lastUserInput && utilModel[i].is_active === "true") {
                    for (x = 0; x < utilModel[i].grades.length; x++) {
                        if (/*(utilModel[i].grades[x].type === "Teste" || utilModel[i].grades[x].type === "Forum" || utilModel[i].grades[x].type === "Exercício")*/utilModel[i].grades[x].str_date !== null && utilModel[i].grades[x].end_date !== null) {
                            gradeList.push(utilModel[i].grades[x].gradeName + "QID:134");
                        }
                    }
                    if (gradeList.length > 0) {
                        botAnswer(doc.doc.body, 2000, gradeList);
                    } else { //sem atividades
                        var outDateQuestion = getDocById(133);
                        searchOptByClick(outDateQuestion.doc.title, outDateQuestion.ref);
                    }
                }
            }
            haveCase = true;
            break;
        case "134":
            if (selectedCourse !== null) {
                for (i = 0; i < selectedCourse.grades.length; i++) {
                    if (selectedCourse.grades[i].gradeName === lastUserInput) {
                        selectedGrade = selectedCourse.grades[i];
                    }
                }
            }
            var init = getDocById(37);
            botAnswer(doc.doc.body, 2000, getQuestionOptions(init));
            haveCase = true;
            break;
    }
    if (!haveCase) {
        //console.log("BATATA");
        botAnswer(textNaoEntendeu, 1000);
    }
}

function getServiceFromServer(action, text, waitTime, buttonList, doc, opt) {
    document.getElementById("headformAction").value = action;
    var $form = $("#headform"),
        i,
        x;
    $.post($form.attr("action"), $form.serialize(), function (response) {
        $.each(response, function (ind, value) {
            //console.log(value);
            var returnList = value.split('|');
            for (i = 0; i < returnList.length; i++) {
                var course = returnList[i].split("_LINENAMES:")[0],
                    gradeList = [],
                    courseType = null,
                    courseModel = null,
                    courseId = null,
                    isOrg = null,
                    isActive;
                if (returnList[i].split("_LINENAMES:")[1] !== undefined) {
                    var gradeListPreparation = returnList[i].split("_LINENAMES:")[1].split("+/");
                    for (x = 0; x < gradeListPreparation.length; x++) {
                        var gradeScore = null,
                            gradeName = null,
                            strDate = null,
                            endDate = null,
                            strHour = null,
                            endHour = null,
                            type = null,
                            match;
                        if (gradeListPreparation[x].split("_GRADE:")[1] !== undefined) {
                            gradeName = gradeListPreparation[x].split("_GRADE:")[0];
                            gradeScore = gradeListPreparation[x].split("_GRADE:")[1];
                            match = gradeScore.match(/(_).+?(:)/gi);
                            if (match !== null) {
                                gradeScore = gradeScore.substr(0, gradeScore.indexOf(match[0]));
                            }
                        } else {
                            gradeName = gradeListPreparation[x];
                            match = gradeName.match(/(_).+?(:)/gi);
                            if (match !== null) {
                                gradeName = gradeName.substr(0, gradeName.indexOf(match[0]));
                            }
                        }
                        strDate = gradeListPreparation[x];
                        strDate = resolveIndexes(strDate, /(_ST-DATE:)/gi, "_ST-DATE:");
                        endDate = gradeListPreparation[x];
                        endDate = resolveIndexes(endDate, /(_EN-DATE:)/gi, "_EN-DATE:");
                        strHour = gradeListPreparation[x];
                        strHour = resolveIndexes(strHour, /(_ST-TIME:)/gi, "_ST-TIME:");
                        endHour = gradeListPreparation[x];
                        endHour = resolveIndexes(endHour, /(_EN-TIME:)/gi, "_EN-TIME:");
                        type = gradeListPreparation[x];
                        type = resolveIndexes(type, /(_GD-TYPE:)/gi, "_GD-TYPE:");
                        var grade = {
                            "gradeName": gradeName,
                            "grade": gradeScore,
                            "str_date": strDate,
                            "end_date": endDate,
                            "str_hour": strHour,
                            "end_hour": endHour,
                            "type": type
                        };
                        gradeList.push(grade);
                    }
                }
                match = course.match(/(_).+?(:)/gi);
                if (match !== null) {
                    course = course.substr(0, course.indexOf(match[0]));
                } else {
                    course = course.substr(0, course.length);
                }
                courseType = returnList[i];
                courseType = resolveIndexes(courseType, /_DSTYPE:/gi, "_DSTYPE:");
                courseModel = returnList[i];
                courseModel = resolveIndexes(courseModel, /_TYPE:/gi, "_TYPE:");
                courseId = returnList[i];
                courseId = resolveIndexes(courseId, /_COURSE-ID:/gi, "_COURSE-ID:");
                isOrg = returnList[i];
                isOrg = resolveIndexes(isOrg, /_IS-ORG:/gi, "_IS-ORG:");
                isActive = returnList[i];
                isActive = resolveIndexes(isActive, /_IS-ACTIVE:/gi, "_IS-ACTIVE:");
                var doc = {
                    "course": course,
                    "grades": gradeList,
                    "course_type": courseType,
                    "course_model": courseModel,
                    "course_id": courseId,
                    "is_org": isOrg,
                    "is_active": isActive
                };
                utilModel.push(doc);
            }
        });
        console.log(utilModel);
        if (utilModel.length < 1) {
            var doct = {
                "course": null,
                "grades": null,
                "course_type": null,
                "course_model": null,
                "course_id": null,
                "is_org": null,
                "is_active": null
            };
            utilModel.push(doct);
        }
        if (text !== undefined) {
            botAnswer(text, waitTime, buttonList);
        }
        if (doc !== undefined) {
            selectServiceFunction(doc, opt);
        }
    }).error(function () {
        closeButtonClick();
    });
}

function getCoursesNTypes() {
    var i,
        newBody = "";
    for (i = 0; i < utilModel.length; i++) {
        if (utilModel[i].is_org === "false" && utilModel[i].is_active === "true") {
            if (newBody === "") {
                newBody += utilModel[i].course + "_TYPE:" + utilModel[i].course_model + "QID:15";
            } else {
                newBody += "|" + utilModel[i].course + "_TYPE:" + utilModel[i].course_model + "QID:15";
            }
        }
    }
    return newBody;
}

function getOrgsNTypes() {
    var i,
        newBody = "";
    for (i = 0; i < utilModel.length; i++) {
        if (utilModel[i].is_org === "true" && utilModel[i].is_active === "true") {
            if (newBody === "") {
                newBody += utilModel[i].course + "_TYPE:" + utilModel[i].course_model + "QID:15";
            } else {
                newBody += "|" + utilModel[i].course + "_TYPE:" + utilModel[i].course_model + "QID:15";
            }
        }
    }
    return newBody;
}

function resolveIndexes(text, pattern, indexName) {
    var match = text.match(pattern);
    if (match !== null) {
        text = text.substr(text.indexOf(indexName) + indexName.length, text.length);
        match = text.match(/(_).+?(:)/gi);
        if (match !== null) {
            text = text.substr(0, text.indexOf(match[0]) + match[0].lastIndexOf("_"));
            //return text.substr(0, match[0].lastIndexOf("_"));
            return text;
        } else {
            return text.substr(0, text.length);
        }
    } else {
        return null;
    }
}

function getuserEmail(doc) {
    document.getElementById("headformAction").value = "LOAD_EMAIL";
    var $form = $("#headform"),
        bodyList = [],
        bodyStr = "",
        i;
    $.post($form.attr("action"), $form.serialize(), function (response) {
        if (response !== "") {
            doc.body = "Confirme seu email ou digite outro no campo de texto: " + response;
            document.getElementsByName("USER_EMAIL")[0].value = response;
            botAnswer(doc.body, 2000, ['confirmar', 'cancelar']);
        } else {
            doc.body = "Por favor digite seu endereço de email no campo de texto para que possamos entrar em contato:";
            document.getElementsByName("USER_EMAIL")[0].value = response;
            botAnswer(doc.body, 2000, ['cancelar']);
        }
        stage = "select_email";
    }).error(function () {
        closeButtonClick();
    });
    //console.log(bodyStr);
    return bodyList;
}

function getCourseActivityEndDate(course) {
    document.getElementById("headformAction").value = "GET_COURSE_DATE";
    document.getElementsByName("SELECTED_COURSE")[0].value = course;
    var $form = $("#headform");
    $.post($form.attr("action"), $form.serialize(), function (response) {
        //console.log(response);
        botAnswer(response, 1000);
        var initDoc = getDocById(37);
        botAnswer(initDoc.doc.body, 2000, getQuestionOptions(initDoc));
        selections = "";
    }).error(function () {
        closeButtonClick();
    });
}


function sendEmailService() {
    document.getElementById("headformAction").value = "SEND_EMAIL";
    document.getElementsByName("USER_PROBLEM")[0].value = selections;
    var $form = $("#headform");
    $.post($form.attr("action"), $form.serialize(), function (response) {
        botAnswer("Seu problema foi enviado para o suporte, você será informado pelo email escolhido quando a situação for corrigida.", 2000);
        setTimeout(callTyping, 2100);
        var docNext = getDocById(37);
        botAnswer(docNext.doc.body, 4000, getQuestionOptions(docNext));
        selections = "";
    }).error(function () {
        closeButtonClick();
    });
}

function saveConversation(conversation) {
    document.getElementById("headformAction").value = "SAVE_CV";
    document.getElementsByName("USER_PROBLEM")[0].value = selections;
    document.getElementById("fullConversation").value = conversation;
    var $form = $("#headform");
    $.post($form.attr("action"), $form.serialize(), function (response) {
        document.getElementById("starScore").value = "";
        document.getElementById("fullConversation").value = "";
        allChat = "";
        interactionCount = 0;
    }).error(function () {
        closeButtonClick();
    });
}

function setServideBody(doc, body) {
    var i,
        bodyStr = "";
    if (body !== undefined) {
        for (i = 0; i < body.length; i++) {
            //console.log("body: " + body[i]);
            if (bodyStr === "") {
                bodyStr += body[i];
            } else {
                bodyStr += "|" + body[i];
            }
        }
        //console.log("bodyStr: " + bodyStr);
        doc.body = bodyStr;
    }
}

function selectAllContent() {
    document.getElementById("userInput").select();
}

/*function specialQuestionAsked(input) {
    var busca = index.search(input, {
        fields: {
            title: {boost: 0.5},
            body: {boost: 0.5},
            keyword: {boost: 2}
        },
        bool: "OR",
        expand: true
    });
    //console.log(busca);
    if (busca.length > 0 && busca[0].score > 1 &&
        (busca[0].ref === "identificacao" || busca[0].ref === "data" || busca[0].ref === "objetivo"
            || busca[0].ref === "biblioteca")) {
        botAnswer(busca[0].doc.body, 2000);
        botAnswer(textAlgoMais, 3000);
        return true;
    } else if (busca.length > 0 && busca[0].ref === "atividades") {
        if (busca[0].doc.body === "") {
            document.getElementById("headformAction").value = "LOAD_SERVICE_SUBJECTS";
            var $form = $("#headform");
            $.post($form.attr("action"), $form.serialize(), function (response) {
                $.each(response, function (ind, value) {
                    var question = value.split('|');
                    var doc = {
                        "id": question[0],
                        "title": question[1],
                        "body": question[2],
                        "tags": question[3],
                        "keyword": question[4]
                    };
                    index.addDoc(doc);
                    var str = question[4].split(' ');
                    for (var i = 0; i < str.length; i++) {
                        fuzzy.add(str[i]);
                    }
                });
                executeSpecialQuestion(input);
            });
        } else {
            questionAtividade(input);
        }
        return true;
    } else if (busca.length > 0 && busca[0].ref === "agendamento") {
        if (busca[0].doc.body === "") {
            document.getElementById("headformAction").value = "LOAD_SERVICE_SAU";
            var $form = $("#headform");
            $.post($form.attr("action"), $form.serialize(), function (response) {
                $.each(response, function (ind, value) {
                    var question = value.split('|');
                    var doc = {
                        "id": question[0],
                        "title": question[1],
                        "body": question[2],
                        "tags": question[3],
                        "keyword": question[4]
                    };
                    index.addDoc(doc);
                    var str = question[4].split(' ');
                    for (var i = 0; i < str.length; i++) {
                        fuzzy.add(str[i]);
                    }
                });
                executeSpecialQuestion(input);
            });
        } else {
            questionAtividade(input);
        }
        return true;
    } else if (busca.length > 0 && busca[0].ref === "prova") {
        if (busca[0].doc.body === "") {
            document.getElementById("headformAction").value = "LOAD_SERVICE_PROVA";
            var $form = $("#headform");
            $.post($form.attr("action"), $form.serialize(), function (response) {
                $.each(response, function (ind, value) {
                    var question = value.split('|');
                    var doc = {
                        "id": question[0],
                        "title": question[1],
                        "body": question[2],
                        "tags": question[3],
                        "keyword": question[4]
                    };
                    index.addDoc(doc);
                    var str = question[4].split(' ');
                    for (var i = 0; i < str.length; i++) {
                        fuzzy.add(str[i]);
                    }
                });
                executeSpecialQuestion(input);
            });
        } else {
            questionAtividade(input);
        }
        return true;
    }
    else {
        return false;
    }
}

function executeSpecialQuestion(input) {
    var busca = index.search(input, {
        fields: {
            title: {boost: 0.5},
            body: {boost: 0.5},
            keyword: {boost: 2}
        },
        bool: "OR",
        expand: true
    });
    if (busca.length > 0) {
        if (busca[0].ref === "atividades") {
            questionAtividade(input);
        }
        else if (busca[0].ref === "agendamento") {
            questionAtividade(input);
        }
        else if (busca[0].ref === "prova") {
            questionAtividade(input);
        }
    } else {
        botAnswer(textAlgoMais, delayTime);
    }
}

function questionAtividade(input) {
    setTimeout(
        function () {
            var busca = index.search(input, {
                fields: {
                    title: {boost: 0.5},
                    body: {boost: 0.5},
                    keyword: {boost: 2}
                },
                bool: "OR",
                expand: true
            });

            var str = busca[0].doc.body.split("<br><br>"),
                final = [],
                timer = 2000,
                i;
            for (i = 0; i < str.length; i++) {
                if (str[i] !== "") {
                    final.push(str[i]);
                }
            }
            for (i = 0; i < final.length; i++) {
                botAnswer(final[i], timer * (i + 1));
                delayTime = timer * (i + 2);
            }
            botAnswer(textAlgoMais, delayTime);
            var service = document.getElementById("services");
            service.innerHTML += "<a>" + busca[0].doc.body + "</a>"
        }, 1000);
}*/

$(function () {
    $("#userInput").keydown(function (event) {
        if (event.which === 13) {
            //buscaChat();
        }
    });
});
